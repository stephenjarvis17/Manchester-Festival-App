<!-- admin-event -->

<!--
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
-->

<link rel="import" href="../../bower_components/polymer/polymer.html">

 <!-- norman -->
<link rel="import" href="../../bower_components/paper-button/paper-button.html">
<link rel="import" href="../../bower_components/paper-input/paper-input.html">
<link rel="import" href="../../bower_components/paper-input/paper-textarea.html">
<link rel="import" href="../../bower_components/paper-material/paper-material.html">
<link rel="import" href="../../bower_components/paper-header-panel/paper-header-panel.html">
<link rel="import" href="../../bower_components/paper-toast/paper-toast.html">
<link rel="import" href="../../bower_components/paper-item/paper-item.html">
<link rel="import" href="../../bower_components/paper-item/paper-item-body.html">
<link rel="import" href="../../bower_components/paper-fab/paper-fab.html">
<link rel="import" href="../../bower_components/paper-icon-button/paper-icon-button.html">
<link rel="import" href="../../bower_components/iron-icons/notification-icons.html">
<link rel="import" href="../../bower_components/firebase-element/firebase-collection.html">
<link rel="import" href="../../bower_components/paper-dialog/paper-dialog.html">
<link rel="import" href="../../bower_components/paper-dialog-behavior/paper-dialog-behavior.html">
<link rel="import" href="../../bower_components/paper-menu/paper-menu.html">
<link rel="import" href="../../bower_components/paper-dropdown-menu/paper-dropdown-menu.html">
<link rel="import" href="../../bower_components/paper-listbox/paper-listbox.html">

<!-- third party -->
<link rel="import" href="../../bower_components/paper-time-picker/paper-time-picker.html">
<link rel="import" href="../../bower_components/paper-date-picker/paper-date-picker.html">

<!-- <link rel="import" href="styles/app-theme.html">
<link rel="import" href="styles/shared-styles.html"> -->
 <!-- end of norman -->

<dom-module id="admin-event">
  <template>
    <style include="shared-styles"></style>
    <style>
      :host {
        display: block;
      }
    </style>

     <firebase-collection id="refFirebaseLocation" order-by-child="name" location="https://legendmanchesterma.firebaseIO.com/location"  data="{{locationCollection}}"></firebase-collection>

    <firebase-collection id="refFirebaseEvent" location="https://legendmanchesterma.firebaseIO.com/event"  data="{{eventsCollection}}"></firebase-collection>

    <!-- start time and date dialogs-->
    <div>
      <paper-dialog id="dlgStartTime" class="paper-time-picker-dialog" modal on-iron-overlay-closed="_closeStartTimePickerDialog">
        <paper-time-picker id="picker" time="{{timeStartTemp}}" hour="{{hourStTemp}}" minute="{{minuteStTemp}}"></paper-time-picker>
          <div class="buttons">
            <paper-button dialog-dismiss>CANCEL</paper-button>
            <paper-button dialog-confirm autofocus>OK</paper-button>
          </div>
      </paper-dialog>
    </div>

     <div>
      <paper-dialog id="dlgStartDate" class="paper-date-picker-dialog" modal
      on-iron-overlay-closed="_closeStartDatePickerDialog">
        <paper-date-picker id="picker" date="{{dateStartTemp}}"></paper-date-picker>
        <div class="buttons">
          <paper-button dialog-dismiss>Cancel</paper-button>
          <paper-button dialog-confirm autofocus>OK</paper-button>
        </div>
      </paper-dialog>
    </div>
    <!-- end of start time and date dialogs-->

    <!-- end time and date dialogs-->
    <div>
      <paper-dialog id="dlgEndTime" class="paper-time-picker-dialog" modal on-iron-overlay-closed="_closeEndTimePickerDialog">
        <paper-time-picker id="picker" time="{{timeEndTemp}}" hour="{{hourEndTemp}}" minute="{{minuteEndTemp}}"></paper-time-picker>
          <div class="buttons">
            <paper-button dialog-dismiss>CANCEL</paper-button>
            <paper-button dialog-confirm autofocus>OK</paper-button>
          </div>
      </paper-dialog>
    </div>

     <div>
      <paper-dialog id="dlgEndDate" class="paper-date-picker-dialog" modal
      on-iron-overlay-closed="_closeEndDatePickerDialog">
        <paper-date-picker id="picker" date="{{dateEndTemp}}"></paper-date-picker>
        <div class="buttons">
          <paper-button dialog-dismiss>Cancel</paper-button>
          <paper-button dialog-confirm autofocus>OK</paper-button>
        </div>
      </paper-dialog>
    </div>
    <!-- end - end time and date dialogs -->

    <paper-header-panel mode="waterfall">
      <div class="paper-header">Event</div>
      <div class="content fit">
      <!-- content fits 100% below the header -->
        <div class="vertical-section">
          <paper-input id="name"  label="Name..."></paper-input>
          <paper-input id="description" label="Description..."></paper-input>

          <paper-dropdown-menu label="Locations" on-iron-select="_itemSelected">
            <paper-menu id="locationMenu" class="dropdown-content">          
              <template is="dom-repeat" items="{{locationCollection}}" as="location">
                <paper-item value="{{location}}">{{location.name}}</paper-item>
              </template>
            </paper-menu>
          </paper-dropdown-menu>

          <paper-input id="start" label="Start..." value="{{startDateDisplayed}}" readonly on-tap="_paperItemStartSelected"></paper-input>
          <paper-input id="end" label="End..." value="{{endDateDisplayed}}" readonly on-tap="_paperItemEndSelected"></paper-input>
          <paper-button raised on-click="_submit">Submit</paper-button>
          <paper-toast id="toast" duration="3000"></paper-toast>
        </div>
      </div>
     </paper-header-panel>

  </template>

  <script>
    Polymer({
      is: 'admin-event',
      properties: {
      	time: {
      		notify: true,
      		type: String
      	},
        selectedLocation: {
          type: Object,
          notify: true
        },
        hour: {
          type: String,
          value: '10'
        },
        minute: {
          type: String,
          value: ''
        },
        timeStartTemp: {
          type: String,
          value: '10:00AM'
        },
        startDateTime: {
          type: Date,
          value: new Date(),
          notify: true,
          observer: '_startDateTimeChanged'
        },
        startDateDisplayed: {
          type: String,
          value: '',
          notify: true
        },
        timeEndTemp: {
          type: String,
          value: '10:00AM'
        },
        endDateTime: {
          type: Date,
          value: new Date(),
          notify: true,
          observer: '_endDateTimeChanged'
        },
        endDateDisplayed: {
          type: String,
          value: '',
          notify: true
        },
        dateTimeOptions: {
          value: function() {
            return {
              year: 'numeric', 
              month: 'numeric', 
              day: 'numeric',  
              hour12: true,  
              hour: '2-digit', 
              minute: '2-digit'
            };
          }
        }
      },
      // date and time functions
      _startDateTimeChanged: function() {
        this.startDateDisplayed = this.startDateTime.toLocaleTimeString(
          navigator.language, this.dateTimeOptions);
      },
      ready: function() {
        this.endDateDisplayed = this.startDateDisplayed = this.startDateTime.toLocaleString(
          navigator.language, this.dateTimeOptions);

        this.hour = this.startDateTime.getHours();
        this.minute = this.startDateTime.getMinutes();
      },
      _paperItemStartSelected: function() {
          this._openStartTimePicker();
          this._openStartDatePicker();
      },
      _openStartTimePicker: function() {
        var v = this.startDateTime.toLocaleTimeString().replace(/:\d+ /, '');
        this.timeStartTemp = v;
        this.$.dlgStartTime.open();
      },
      _closeStartTimePickerDialog: function(e) {
        if (e && e.target && e.target.closingReason.confirmed) {
          var y = this.startDateTime.getFullYear();
          var m = this.startDateTime.getMonth();
          var d = this.startDateTime.getDate();
         
          this.hour = this.hourStTemp;
          this.minute = this.minuteStTemp;
          this.startDateTime = new Date(y, m, d, this.hour, this.minute, 0, 0);
          return;
        }
        this.timeDbTemp = this.timeStartTemp = 
        this.startDateTime.toLocaleTimeString().replace(/:\d+ /, '');
      },
      _openStartDatePicker: function() {
        var y = this.startDateTime.getFullYear();
        var m = this.startDateTime.getMonth();
        var d = this.startDateTime.getDate();
        
        this.dateStartTemp = new Date(y, m, d, this.hour, this.minute, 0, 0);
        this.$.dlgStartDate.open();
      },
      _closeStartDatePickerDialog: function(e) {
        if (e && e.target && e.target.closingReason.confirmed) {
          var y = this.dateStartTemp.getFullYear();
          var m = this.dateStartTemp.getMonth();
          var d = this.dateStartTemp.getDate();
          var h = this.startDateTime.getHours();
          var min = this.startDateTime.getMinutes();
          
          this.startDateTime = new Date(y, m, d, h, min, 0, 0);
          return;
        }
        this.dateStartTemp = this.startDateTime;// sync ui next time its displayed
      },
      // Start of the end time and date
      _endDateTimeChanged: function() {
        this.endDateDisplayed = this.endDateTime.toLocaleTimeString(
          navigator.language, this.dateTimeOptions);
      },
      _paperItemEndSelected: function(e) {
        this._openEndTimePicker();
        this._openEndDatePicker();
      },
      _openEndTimePicker: function() {
        var v = this.endDateTime.toLocaleTimeString().replace(/:\d+ /, '');
        this.timeEndTemp = v;
        this.$.dlgEndTime.open();
      },
      _closeEndTimePickerDialog: function(e) {
        if (e && e.target && e.target.closingReason.confirmed) {
          var y = this.endDateTime.getFullYear();
          var m = this.endDateTime.getMonth();
          var d = this.endDateTime.getDate();
         
          this.hour = this.hourEndTemp;
          this.minute = this.minuteEndTemp;
          this.endDateTime = new Date(y, m, d, this.hour, this.minute, 0, 0);
          return;
        }
        this.timeDbTemp = this.timeEndTemp = this.endDateTime.toLocaleTimeString().replace(/:\d+ /, '');
      },
      _openEndDatePicker: function() {
        var y = this.endDateTime.getFullYear();
        var m = this.endDateTime.getMonth();
        var d = this.endDateTime.getDate();
        
        this.dateEndTemp = new Date(y, m, d, this.hour, this.minute, 0, 0);
        this.$.dlgEndDate.open();
      },
      _closeEndDatePickerDialog: function(e) {
        if (e && e.target && e.target.closingReason.confirmed) {
          var y = this.dateEndTemp.getFullYear();
          var m = this.dateEndTemp.getMonth();
          var d = this.dateEndTemp.getDate();
          var h = this.endDateTime.getHours();
          var min = this.endDateTime.getMinutes();
          
          this.endDateTime = new Date(y, m, d, h, min, 0, 0);
          return;
        }
        this.dateEndTemp = this.endDateTime;// sync ui next time its displayed
      },
      // end of date and time
      _itemSelected : function(e) {
        var selectedItem = e.target.selectedItem;
        if (selectedItem) {
          this.selectedLocation = selectedItem.value;
        }
      },
      // Element Lifecycle
      _submit: function() {
        var msg = 'Your information has been submitted successfully.';

        if (!this._addToFirebase()) {
          msg = 'Error: Your information has NOT been submitted.';
        }
        this._popToast(msg);
      },
      _addToFirebase: function() {
        try {
          this.$.refFirebaseEvent.add(
            {
              name: this.$.name.value,
              description: this.$.description.value,
              location: this.selectedLocation,
              start: this.$.start.value,
              end: this.$.end.value
            }
          );
          return true;
        }
        catch (e) {
          console.log(e.message);
          return false;
        }
      },
      _popToast: function(newValue) {
        this.$.toast.text = newValue;
        this.$.toast.show();
      }

    });
  </script>
</dom-module>
